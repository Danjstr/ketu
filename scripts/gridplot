#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import (division, print_function, absolute_import,
                        unicode_literals)

__all__ = ["run_grid_plot"]

import os
import h5py
import argparse
import numpy as np
import matplotlib.pyplot as pl


def run_grid_plot(output):
    with h5py.File(os.path.join(output, "results.h5"), "r") as f:
        periods = f["periods"][...]
        phases = f["phases"][...]
        dlls = f["dlls"][...]

    # Find delta_ll ranges.
    inds = np.isfinite(dlls)
    mx, mn = np.max(dlls[inds]), np.min(dlls[inds])
    color = lambda v: (v-mn)/(mx-mn)

    fig, axes = pl.subplots(1, 1, figsize=(20, 50))
    fig.subplots_adjust(left=0.0, right=1.0, bottom=0.0, top=1.0)
    dp = np.log10(periods[1]) - np.log10(periods[0])
    for i, period in enumerate(periods):
        t0 = phases[i, np.isfinite(phases[i])]
        ll = color(dlls[i, np.isfinite(dlls[i])])
        axes.pcolor(np.array([np.log10(period), np.log10(period)+dp]),
                    np.append(t0, t0[-1]+(t0[1]-t0[0])),
                    np.atleast_2d(ll).T,
                    cmap="gray", vmin=0, vmax=1)

    pl.savefig(os.path.join(output, "ll.png"))
    print(phases)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Part of speech tagging.")
    parser.add_argument("directory",
                        help="The results directory from a gridsearch run.")
    args = parser.parse_args()

    run_grid_plot(args.directory)
